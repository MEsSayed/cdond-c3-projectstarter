version: 2.1

orbs:
  slack: circleci/slack@4.1.1
  aws-cli: circleci/aws-cli@1.3.0
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@1.4.0
  
parameters:
  # Add parameter here 
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}" 
  memstash-token:
    type: string
    default: "b34bb21f-dd4a-46b3-b31f-190d015509af" 

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.       
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "Destroying environment: <<parameters.workflow-id>> "
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>"
            aws s3 rm s3://udapeople-<< pipeline.parameters.workflow-id >> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>"
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here    
      #workflow_id:
      #  type: string
      #event:
      #  type: string      
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    environment:
      CODE: 123
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            # echo $CODE
            npm install
            npm run build
            #exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build             
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["frontend-build"]
      # Your job code here
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install oauth-sign
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: ["backend-build"]
      # Your job code here
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install oauth-sign
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan fronend dependencies
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical || true     
      
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan fronend dependencies
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical || true
            
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --region us-east-1 \
              --aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} \
              --aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              # --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances --region us-east-1 \
              --aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} \
              --aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} \
              # --filters "Name=tag:project,Values=udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --filters "Name=tag:project,Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt         
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy_environment       


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["06:7c:db:71:49:2f:03:36:60:08:d2:fd:33:6f:17:d3"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            ansible --version
            #exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            # pwd &&
            # ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yaml            
            #exit 1
      # Here's where you will add some code to rollback on failure  
      - destroy_environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0      
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd  ./backend
            npm run migrations > migration_status
            #exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd ./backend           
            #exit 1
     # Here's where you will add some code to rollback on failure      
      - destroy_environment
          
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
            echo $API_URL            
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            aws s3 cp --recursive frontend/dist "s3://udapeople-<< pipeline.parameters.workflow-id >>"
      # Here's where you will add some code to rollback on failure      
      - destroy_environment
          
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["06:7c:db:71:49:2f:03:36:60:08:d2:fd:33:6f:17:d3"]      
      # attach workspace
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible openssh-client tar gzip
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend/dist            
      # Here's where you will add some code to rollback on failure  
      - destroy_environment
          
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11      
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl            
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
            return 1
            else
            return 0
            fi            
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-<< pipeline.parameters.workflow-id >>.s3-website-eu-west-3.amazonaws.com"
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy_environment
          
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
            apk add --update curl
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="<< pipeline.parameters.workflow-id >>" \
              --tags project=udapeople            
      # Here's where you will add some code to rollback on failure  
      - destroy_environment
          
  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git 1
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            # export OldWorkflowID="the id here"
            # export STACKS=[] #put the list of stacks here
            export OldWorkflowID=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID})
            echo "Old Workflow ID: ${OldWorkflowID}"
      - run:
          name: Remove old stacks and files
          command: |
            if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]